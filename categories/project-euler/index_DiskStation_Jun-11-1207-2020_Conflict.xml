<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Project Euler on 槑烎</title>
    <link>http://peterz.xyz/categories/project-euler/</link>
    <description>Recent content in Project Euler on 槑烎</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 02 Feb 2013 14:44:54 +0000</lastBuildDate>
    
	<atom:link href="http://peterz.xyz/categories/project-euler/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Euler第四题</title>
      <link>http://peterz.xyz/2013/02/02/euler%E7%AC%AC%E4%B8%89%E9%A2%98/</link>
      <pubDate>Sat, 02 Feb 2013 14:44:54 +0000</pubDate>
      
      <guid>http://peterz.xyz/2013/02/02/euler%E7%AC%AC%E4%B8%89%E9%A2%98/</guid>
      <description>寻找一个最大的为两个3位数乘积的回文。
回文就是正着念，反着念相同的数或单词，如 9009 = 91×99。
 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  from time import clockstart=clock()z=999a=[0,0,0]flag=Falsefor i in range(100000):a[0]=int(z/100)a[1]=int((z-100*a[0])/10)a[2]=int(z-100\*a[0]-10\*a[1])palindrome=100000\*a[0]+10000\*a[1]+1000\*a[2]+100\*a[2]+10*a[1]+a[0]#print(palindrome) product=999for j in range(999):if palindrome/product&amp;lt;1000 and palindrome%product==0:print(&amp;#34;the answer is {0}={1}&amp;#34;.format(palindrome,product,int(palindrome/product)))flag=Truebreakproduct=product-1z=z-1if flag==True or palindrome&amp;lt;0: breakprint(&amp;#34;{0:5f}s&amp;#34;.</description>
    </item>
    
    <item>
      <title>Project Euler 第三题的一个nb算法</title>
      <link>http://peterz.xyz/2013/01/27/project-euler-%E7%AC%AC%E4%B8%89%E9%A2%98%E7%9A%84%E4%B8%80%E4%B8%AAnb%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 27 Jan 2013 14:38:29 +0000</pubDate>
      
      <guid>http://peterz.xyz/2013/01/27/project-euler-%E7%AC%AC%E4%B8%89%E9%A2%98%E7%9A%84%E4%B8%80%E4%B8%AAnb%E7%AE%97%E6%B3%95/</guid>
      <description>题目：求600851475143 的最大质因数。
搞了2,3个小时，搞出来的算法效率都很低。网上发现一个nb算法。改成python后如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  def maxPrime():n=600851475143d=2while d&amp;lt;n/d:if n%d==0:n=int(n/d)else:d=d+1return nif __name__==&amp;#34;__main__&amp;#34;:from time import clockstart=clock()finish=clock()print(&amp;#34;the largest prime factor is {0}\t\t{1}s&amp;#34;.format(maxPrime(),(finish-start)/1000000))  结果: the largest prime factor is 6857 4.462223927783368e-13s
哎，差距啊~</description>
    </item>
    
  </channel>
</rss>